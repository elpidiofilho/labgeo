library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
devtools::document()
@devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
devtools::document()
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
devtools::document()
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
dir.exists("c:\")
pat = glob2rx(raster_type)
l =list.files(path_raster, pattern = pat,include.dirs = T,full.names = T)
st = stack(l)
p = readOGR(path_point, name_point)
inicio = Sys.time()
beginCluster(cpu_cores)
dp = extract(st, p, df = T)
endCluster()
print(Sys.time() - inicio)
dc = data.frame(p@data, dp)
if (remove_NA == T) {
dc = na.omit(dc)
}
return(dc)
}
dir.exists("c:\")
pat = glob2rx(raster_type)
l =list.files(path_raster, pattern = pat,include.dirs = T,full.names = T)
st = stack(l)
p = readOGR(path_point, name_point)
inicio = Sys.time()
beginCluster(cpu_cores)
dp = extract(st, p, df = T)
endCluster()
print(Sys.time() - inicio)
dc = data.frame(p@data, dp)
if (remove_NA == T) {
dc = na.omit(dc)
}
return(dc)
}
dir.exists("c:/")
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
n = length(v)
v =c("b1","b2","b3","b4","b5","b6","b7")
n = length(v)
gr = expand.grid(1:v, 1:v, 1:v)
gr = expand.grid(1:n, 1:n, 1:n)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
devtools::document()
devtools::document()
library("devtools", lib.loc="~/R/win-library/3.4")
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(labgeo)
getwd()
install.packages("lintr")
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
library(labgeo)
library(labgeo)
lintr::lint_package()
dtrainn <- df[cp,]
library(labgeo)
lintr::lint_package()
library(labgeo)
lintr::lint_package()
library(labgeo)
lintr::lint_package()
library(labgeo)
lintr::lint_package()
library(labgeo)
lintr::lint_package()
library(labgeo)
lintr::lint_package()
library(labgeo)
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
library(labgeo)
library(labgeo)
lintr::lint_package()
lintr::lint_package()
lintr::lint_package()
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
install.packages("corrplot")
library(labgeo)
library(labgeo)
library(labgeo)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(goodpractice)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
medicao = c(1:11)
solo = c(1.8, 1.2, 2, 3.4, 3.8, 1.9, 2.5, 2.2, 1.1, 0.9, 0.85)
serapilheira = c(2.4, 1.5, 2.4, 3.2, 4, 2.5, 3.1, 2.1, 1.7, 1, 0.9)
df = data.frame(solo = solo, serapilheira = serrapilheira)
serapilheira = c(2.4, 1.5, 2.4, 3.2, 4, 2.5, 3.1, 2.1, 1.7, 1, 0.9)
df = data.frame(solo = solo, serapilheira = serapilheira)
barplot(solo)
barplot(serapilheira)
barplot(solo,serapilheira)
library(gather)
library(tidyr)
df = data.frame(solo = solo, serapilheira = serapilheira)
df = data.frame(solo = solo, serapilheira = serapilheira) %>% gather(key =var, value=valor)
ggplot(data = df, aes(x=var,y=valor)) + geom_bar(stat="identity")
library(ggplot2)
ggplot(data = df, aes(x=var,y=valor)) + geom_bar(stat="identity")
ggplot(data = df, aes(x=var,y=valor,group=var)) + geom_bar(stat="identity")
df = data.frame(n = seq(1:length(solo)),solo = solo, serapilheira = serapilheira) %>% gather(key =var, value=valor)
df = data.frame(n = seq(1:length(solo)),solo = solo, serapilheira = serapilheira) %>% gather(key =var, value=valor,-n)
ggplot(data = df, aes(x=n,y=valor,group=var)) + geom_bar(stat="identity")
ggplot(data = df, aes(x=n,y=valor,group=var,colour = n)) + geom_bar(stat="identity")
ggplot(data = df, aes(x=n,y=valor,group=n,colour = n)) + geom_bar(stat="identity")
ggplot(data = df, aes(x=n,y=valor,group=var,colour = n)) + geom_bar(stat="identity")
ggplot(data = df, aes(x=n,y=valor,group=var,colour = n)) + geom_bar()
ggplot(data = df, aes(x=n,y=valor,group=var,colour = n)) + geom_col()
ggplot(data = df, aes(x=n,y=valor,group=var,fill = n)) + geom_col()
View(df)
ggplot(data = df, aes(x=n,y=valor,group=var,fill = n)) + geom_col() + facet_wrap(~var)
ggplot(data = df, aes(x=as.factor(n),y=valor,group=var,fill = n)) + geom_col() + facet_wrap(~var)
ggplot(data = df, aes(x=as.factor(n),y=valor,group=var,fill = n)) + geom_bar(stat="identity",position = "dodge")  facet_wrap(~var)
ggplot(data = df, aes(x=as.factor(n),y=valor,group=var,fill = n)) + geom_bar(stat="identity",position = "dodge")  barplot(solo,serapilheira)
ggplot(data = df, aes(x=as.factor(n),y=valor,group=var,fill = n)) + geom_bar(stat="identity",position = "dodge")
ggplot(data = df, aes(x=as.factor(n),y=valor,group=var,fill = as.factor(var))) + geom_bar(stat="identity",position = "dodge")
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
sqrt(400000)
install.packages("RSAGA")
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
update(devtools::package_deps())
devtools::dev_mode()
devtools::check_man()
devtools::run_examples(run = FALSE)
devtools::check(document = TRUE, check_version = TRUE, force_suggests = TRUE, args = "--use-valgrind")
devtools::dev_mode()
library(labgeo)
install.packages(c("knitr", "lintr", "pander", "randomForestSRC", "rlang", "smotefamily", "spatstat.utils", "TMB", "validate"))
install.packages(c("rlang", "TMB"))
install.packages("rlang")
install.packages("TMB")
devtools::document()
library(labgeo)
# Dependencies
update(devtools::package_deps())
# turn on/off development mode
devtools::dev_mode()
# check examples and documentation
devtools::check_man()
devtools::run_examples(run = FALSE)
# check the package for Linux and Windows
devtools::check(document = TRUE, check_version = TRUE, force_suggests = TRUE, args = "--use-valgrind")
# turn on/off development mode
devtools::dev_mode()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
# Dependencies
update(devtools::package_deps())
# turn on/off development mode
devtools::dev_mode()
# check examples and documentation
devtools::check_man()
devtools::run_examples(run = FALSE)
# check the package for Linux and Windows
devtools::check(document = TRUE, check_version = TRUE, force_suggests = TRUE, args = "--use-valgrind")
# turn on/off development mode
devtools::dev_mode()
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
devtools::document()
library("labgeo", lib.loc="~/R/win-library/3.4")
devtools::document()
devtools::document()
library(labgeo)
library(labgeo)
update(devtools::package_deps())
devtools::dev_mode()
devtools::check_man()
devtools::check_man()
devtools::check_man()
devtools::check_man()
devtools::check_man()
devtools::run_examples(run = FALSE)
devtools::run_examples(run = FALSE)
devtools::check(document = TRUE, check_version = TRUE, force_suggests = TRUE, args = "--use-valgrind")
devtools::dev_mode()
library(labgeo)
library(labgeo)
roxygen2::roxygenise()
devtools::document()
library(labgeo)
devtools::document()
library(goodpractice)
install.packages("goodpractice")
gp()
library(goodpractice)
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
devtools::document()
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library(labgeo)
library("labgeo", lib.loc="~/R/win-library/3.4")
detach("package:labgeo", unload=TRUE)
library("labgeo", lib.loc="~/R/win-library/3.4")
detach("package:labgeo", unload=TRUE)
library("labgeo", lib.loc="~/R/win-library/3.4")
devtools::install_github("ropenscilabs/available")
install.packages("boxes")
devtools::install_github("r-lib/boxes")
devtools::install_github("ropenscilabs/available")
devtools::install_github("ropenscilabs/available")
devtools::install_github("ropenscilabs/available")
devtools::install_github("rstudio/rstudioapi")
devtools::install_github("gaborcsardi/crayon")
devtools::install_github("ropenscilabs/available")
devtools::install_github("r-lib/boxes")
devtools::install_github("r-lib/boxes")
install.packages("C:/Users/elpidio/Downloads/r-lib-boxes-03098dc.zip", repos = NULL, type = "win.binary")
devtools::install_github("ropenscilabs/available")
install.packages("C:/Users/elpidio/Downloads/ropenscilabs-available-df77b4e.zip", repos = NULL, type = "win.binary")
library(available)
install.packages("C:/Users/elpidio/Downloads/ropenscilabs-available-df77b4e.zip", repos = NULL, type = "win.binary")
devtools::install_github("ropenscilabs/available")
devtools::install_github("r-lib/boxes")
devtools::install_github("r-lib/boxes")
devtools::install_github("ropenscilabs/available")
devtools::install_github("ropenscilabs/available")
devtools::install_github("ropenscilabs/available")
devtools::install_github("ropenscilabs/available")
devtools::install_github("ropenscilabs/available")
devtools::install_github("ropenscilabs/available")
library(available)
suggest(title = "Collection of functions to land use and soil mapping")
suggest(title = "functions to land use and soil mapping")
avaliable("dsm")
available("dsm")
available("dsm")
available("dsm")
available("dsm")
available("dsm")
available("dsm")
available_on_cran("dsm")
available_on_cran("dsm1")
available_on_cran("digitalsoilmapping")
available_on_cran("soilmapping")
install.packages("dsm")
available_on_cran("easyfit")
available("dsm")
available_on_cran("runmodel")
devtools::document()
devtools::document()
library(labgeo)
run_models_performance <- function(fit.run.model, df.valida, flagplot = FALSE) {
nm = length(fit.run.model)
summ_model = dplyr::tibble(model = character(nm), fit = list(nm), dfpredobs = list(nm),
r2 = numeric(nm), rmse = numeric(nm), grafic1 = list(nm), grafic2 = list(nm))
for (i in 1:length(fit.run.model)) {
fit.md = fit.run.model[[i]]
v = predict(fit.md, df.valida)
ddd = data.frame(observado = df.valida[, 1], predito = v, residuo = abs(v - df.valida[,1]))
names(ddd)[1] = "observado"
names(ddd)[3] = "residuo"
summ_model$model[i] = fit.md$method
summ_model$fit[i] = list(fit.md)
summ_model$dfpredobs[i] = list(ddd)
summ_model$r2[i] = caret::postResample(ddd$predito,ddd$observado)[2]
summ_model$rmse[i] = caret::postResample(ddd$predito,ddd$observado)[1]
maxvalue = ceiling(max(max(df.valida[, 1]), v) / 5) * 5
summ_model$grafic1[i] = list(ggplot2::ggplot(ddd, aes(x= predito, y = observado)) +
ggplot2::geom_point() +
ggplot2::ggtitle(paste(fit.md$method, " R2 = ",
round(summ_model$r2[i], 3))) +
ggplot2::xlim(c(0,maxvalue)) + ggplot2::ylim(c(0, maxvalue))+
ggplot2::geom_abline(slope = 1, intercept = 0, color = "red"))
residuo = ddd$residuo
density <- get_density(ddd$predito, ddd$observado)
maxresiduo = max(residuo)
summ_model$grafic2[i] = list(ggplot2::ggplot(ddd) +
ggplot2::geom_point(aes(predito, observado, color = density ^ 0.7), size = 0.1, shape = 20) +
viridis::scale_color_viridis() +
ggplot2::xlim(c(0,maxvalue)) + ggplot2::ylim(c(0, maxvalue)) +
ggplot2::geom_abline(slope = 1, intercept = 0, color = "red") +
ggplot2::ggtitle(fit.md$method))
}
if flagplot {
print(ggplot(summ_model, aes(x=model, y= r2)) + geom_col())
}
return(summ_model)
}
run_models_performance <- function(fit.run.model, df.valida, flagplot = FALSE) {
nm = length(fit.run.model)
summ_model = dplyr::tibble(model = character(nm), fit = list(nm), dfpredobs = list(nm),
r2 = numeric(nm), rmse = numeric(nm), grafic1 = list(nm), grafic2 = list(nm))
for (i in 1:length(fit.run.model)) {
fit.md = fit.run.model[[i]]
v = predict(fit.md, df.valida)
ddd = data.frame(observado = df.valida[, 1], predito = v, residuo = abs(v - df.valida[,1]))
names(ddd)[1] = "observado"
names(ddd)[3] = "residuo"
summ_model$model[i] = fit.md$method
summ_model$fit[i] = list(fit.md)
summ_model$dfpredobs[i] = list(ddd)
summ_model$r2[i] = caret::postResample(ddd$predito,ddd$observado)[2]
summ_model$rmse[i] = caret::postResample(ddd$predito,ddd$observado)[1]
maxvalue = ceiling(max(max(df.valida[, 1]), v) / 5) * 5
summ_model$grafic1[i] = list(ggplot2::ggplot(ddd, aes(x= predito, y = observado)) +
ggplot2::geom_point() +
ggplot2::ggtitle(paste(fit.md$method, " R2 = ",
round(summ_model$r2[i], 3))) +
ggplot2::xlim(c(0,maxvalue)) + ggplot2::ylim(c(0, maxvalue))+
ggplot2::geom_abline(slope = 1, intercept = 0, color = "red"))
residuo = ddd$residuo
density <- get_density(ddd$predito, ddd$observado)
maxresiduo = max(residuo)
summ_model$grafic2[i] = list(ggplot2::ggplot(ddd) +
ggplot2::geom_point(aes(predito, observado, color = density ^ 0.7), size = 0.1, shape = 20) +
viridis::scale_color_viridis() +
ggplot2::xlim(c(0,maxvalue)) + ggplot2::ylim(c(0, maxvalue)) +
ggplot2::geom_abline(slope = 1, intercept = 0, color = "red") +
ggplot2::ggtitle(fit.md$method))
}
if (flagplot == TRUE) {
print(ggplot(summ_model, aes(x=model, y= r2)) + geom_col())
}
return(summ_model)
}
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
devtools::document()
library(labgeo)
library(labgeo)
devtools::document()
library(labgeo)
# Dependencies
update(devtools::package_deps())
# turn on/off development mode
devtools::dev_mode()
# check examples and documentation
devtools::check_man()
#devtools::run_examples(run = FALSE)
# check the package for Linux and Windows
devtools::check(document = TRUE, check_version = TRUE, force_suggests = TRUE, args = "--use-valgrind")
# turn on/off development mode
devtools::dev_mode()
devtools::install(pkg = '../labgeo_0.1.7.0.zip', dependencies = T )
devtools::install(pkg = '.', dependencies = T )
library(labgeo)
